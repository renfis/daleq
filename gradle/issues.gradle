/*
 * Copyright 2012 brands4friends, Private Sale GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



task issues() << {

    def foundIssues = 0

    reportXmlErrors(
            fileTree("${project.testResultsDir}") { include '**/*.xml'}) { xml ->
        xml.testcase.failure.each { failure ->
            def testcase = failure.parent()
            println "${testcase['@classname']}#${testcase['@name']}(): ${failure['@message']}"
            println failure.text()

            foundIssues++
        }
    }

    reportXmlErrors(reportFiles("checkstyle")) { xml ->
        xml.file.error.each { error ->
            def file = error.parent()
            def name = file['@name']
            def line = error['@line']
            def column = error['@column']
            def message = error['@message']

            println "${name}:${line}:${column}"
            println "    ${message}"

            foundIssues++
        }
    }

    reportXmlErrors(reportFiles("pmd")) { xml ->
        xml.file.violation.each { violation ->
            def file = violation.parent()['@name']
            def rule = violation['@rule']
            def beginline = violation['@beginline']
            def endline = violation['@endline']
            def text = violation.text()

            println "${file}:${beginline}-${endline}"
            println "    ${rule}: ${text}"

            foundIssues++
        }
    }

    if (!foundIssues) {
        println "   No issues found."
    }
}

def reportFiles(module) {
    fileTree("${project.reporting.baseDir}/${module}") { include "*.xml" }
}

def reportXmlErrors(fileTree, closure) {
    fileTree.visit {
        File xmlFile = it.file
        if (!xmlFile.isDirectory()) {
            def xml = new XmlParser().parse(xmlFile)
            closure(xml)
        }
    }
}
